[func-gradient]
etype = (hex, pri)
bname = (wall)


[directory]
dir = /directory/to/mesh/and/solution/files

mesh_name = your_mesh_name.pyfrm
soln_header = naca0012_           ; It will fill .pyfrs in the end automatically

outdir = .                        ; output directory

[time-series]
tstart = 100
tend = 150
dt = 5
fmat = {:.1f}                     ;i.e. final file name: naca0012_100.0.pyfrs


[func-spanavg]               ; Average the region near a boundary. I.e. wall.
layers = 40                  ; Number of layers.
mode = soln                  ; mesh, soln.
tol = 1e-3                   ; Tolerance for mesh sorting.
nfft = 5                     ; The number of Fourier modes to be saved

[func-probes]                ; Put (several) probe(s) into the field and collect data
 ; Generate a line between A point(s) to B point(s).
 ; If B point is none, only A points is adopted.
samp-ptsA = [(0.0, 0.0, 0.0), (0.0, -35, 1.0)]
samp-ptsB = [(0.0, 0.0, 5.0), (5.0, -15, 5.0)]
npts = (400, 100)            ; Number of points between A and B
exactloc = True              ; If get exact location of sampling points, if false, return the closest points
format = primitive           ; output format, primitive or conservative
mode = soln                  ; mesh, soln

[func-gradient]               Calculate gradient inside each element
etype = (hex, pri)          ; Type of elements
bname = (wall)              ; Name of boundaries


[feature-bl]
AoA = 3                     ; Angle of attack, in deg
trip-loc = 10.0             ; Center of tripping location, in mesh dimension
